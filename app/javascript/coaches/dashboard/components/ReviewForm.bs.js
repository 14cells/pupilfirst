// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var TimelineEvent$ReactTemplate = require("../types/TimelineEvent.bs.js");

var UnexpectedResponse = Caml_exceptions.create("ReviewForm-ReactTemplate.UnexpectedResponse");

function handleApiError(match) {
  if (Caml_exceptions.isCamlExceptionOrOpenVariant(match) && match[0] === UnexpectedResponse) {
    return /* Some */[match[1]];
  } else {
    return /* None */0;
  }
}

function str(prim) {
  return prim;
}

var component = ReasonReact.reducerComponent("ReviewForm");

function saveStatus(status, send, _) {
  return Curry._1(send, /* ChangeStatus */[status]);
}

function handleResponseJSON(te, markReviewedCB, json) {
  var match = Json_decode.field("error", (function (param) {
          return Json_decode.nullable(Json_decode.string, param);
        }), json);
  if (match !== null) {
    console.log(match);
    return /* () */0;
  } else {
    return Curry._1(markReviewedCB, te);
  }
}

function sendReview(te, reviewedStatus, markReviewedCB, authenticityToken, _) {
  console.log("Submitting Review");
  var payload = { };
  payload["authenticity_token"] = authenticityToken;
  var statusKey = typeof reviewedStatus === "number" ? (
      reviewedStatus !== 0 ? "needs_improvement" : "not_accepted"
    ) : "verified";
  payload["status"] = statusKey;
  if (typeof reviewedStatus !== "number") {
    payload["grade"] = TimelineEvent$ReactTemplate.gradeString(reviewedStatus[0]);
  }
  var id = String(TimelineEvent$ReactTemplate.id(te));
  fetch("/timeline_events/" + (id + "/review"), Fetch.RequestInit[/* make */0](/* Some */[/* Post */2], /* Some */[{
                      "Content-Type": "application/json"
                    }], /* Some */[JSON.stringify(payload)], /* None */0, /* None */0, /* None */0, /* Some */[/* SameOrigin */1], /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0)).then((function (response) {
              if (response.ok || response.status === 422) {
                console.log("Handled");
                return response.json();
              } else {
                return Promise.reject([
                            UnexpectedResponse,
                            response.status
                          ]);
              }
            })).then((function (json) {
            return Promise.resolve(handleResponseJSON(te, markReviewedCB, json));
          })).catch((function (error) {
          var match = handleApiError(error);
          return Promise.resolve(match ? (console.log("Error code: " + String(match[0])), /* () */0) : (console.log("Unknown error occured"), /* () */0));
        }));
  return /* () */0;
}

function idPostfix(status) {
  if (status) {
    var reviewedStatus = status[0];
    if (typeof reviewedStatus === "number") {
      if (reviewedStatus !== 0) {
        return "needs-improvement";
      } else {
        return "not-accepted";
      }
    } else {
      return "verified";
    }
  } else {
    return "pending";
  }
}

function statusRadioInput(status, timelineEventId, send) {
  var inputId = "review-form__status-input-" + (idPostfix(status) + ("-" + timelineEventId));
  return React.createElement("div", {
              className: "form-check form-check-inline"
            }, React.createElement("input", {
                  className: "form-check-input",
                  id: inputId,
                  name: "review-form__status-radio-" + timelineEventId,
                  type: "radio",
                  onClick: (function () {
                      return Curry._1(send, /* ChangeStatus */[status]);
                    })
                }), React.createElement("label", {
                  className: "form-check-label",
                  htmlFor: inputId
                }, TimelineEvent$ReactTemplate.statusString(status)));
}

function gradeRadioInput(grade, timelineEventId, send, state) {
  var inputId = "review-form__grade-input-" + (TimelineEvent$ReactTemplate.gradeString(grade) + ("-" + timelineEventId));
  var partial_arg = /* Reviewed */[/* Verified */[grade]];
  return React.createElement("div", {
              className: "form-check form-check-inline"
            }, React.createElement("input", {
                  className: "form-check-input",
                  id: inputId,
                  checked: Caml_obj.caml_equal(TimelineEvent$ReactTemplate.status(state[/* te */0]), /* Reviewed */[/* Verified */[grade]]),
                  name: "review-form__grade-radio-" + timelineEventId,
                  type: "radio",
                  onChange: (function () {
                      return Curry._1(send, /* ChangeStatus */[partial_arg]);
                    })
                }), React.createElement("label", {
                  className: "form-check-label",
                  htmlFor: inputId
                }, $$String.capitalize(TimelineEvent$ReactTemplate.gradeString(grade))));
}

function make(timelineEvent, markReviewedCB, authenticityToken, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */(function (param) {
              console.log("status: " + TimelineEvent$ReactTemplate.statusString(TimelineEvent$ReactTemplate.status(param[/* newSelf */1][/* state */1][/* te */0])));
              return /* () */0;
            }),
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var state = param[/* state */1];
              var timelineEventId = String(TimelineEvent$ReactTemplate.id(state[/* te */0]));
              var match = TimelineEvent$ReactTemplate.status(state[/* te */0]);
              var tmp;
              if (match) {
                var reviewedStatus = match[0];
                var partial_arg = state[/* te */0];
                tmp = React.createElement("button", {
                      className: "btn btn-primary mt-1",
                      onClick: (function (param) {
                          return sendReview(partial_arg, reviewedStatus, markReviewedCB, authenticityToken, param);
                        })
                    }, "Save Review");
              } else {
                tmp = null;
              }
              return React.createElement("div", undefined, React.createElement("h5", {
                              className: "timeline-event-card__field-header mt-0"
                            }, "Update Status:"), React.createElement("div", undefined, statusRadioInput(/* Reviewed */[/* Verified */[/* Good */0]], timelineEventId, send), statusRadioInput(/* Reviewed */[/* NeedsImprovement */1], timelineEventId, send), statusRadioInput(/* Reviewed */[/* NotAccepted */0], timelineEventId, send)), TimelineEvent$ReactTemplate.isVerified(state[/* te */0]) ? React.createElement("div", undefined, React.createElement("h5", {
                                    className: "timeline-event-card__field-header"
                                  }, "Grade:"), React.createElement("div", undefined, gradeRadioInput(/* Good */0, timelineEventId, send, state), gradeRadioInput(/* Great */1, timelineEventId, send, state), gradeRadioInput(/* Wow */2, timelineEventId, send, state))) : null, tmp);
            }),
          /* initialState */(function () {
              return /* record */[/* te */timelineEvent];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _) {
              return /* Update */Block.__(0, [/* record */[/* te */TimelineEvent$ReactTemplate.updateStatus(action[0], timelineEvent)]]);
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.UnexpectedResponse = UnexpectedResponse;
exports.handleApiError = handleApiError;
exports.str = str;
exports.component = component;
exports.saveStatus = saveStatus;
exports.handleResponseJSON = handleResponseJSON;
exports.sendReview = sendReview;
exports.idPostfix = idPostfix;
exports.statusRadioInput = statusRadioInput;
exports.gradeRadioInput = gradeRadioInput;
exports.make = make;
/* component Not a pure module */
