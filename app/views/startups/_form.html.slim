- session[:startup_id] = @startup.id

p
  i Please note that you can come back and change these details whenever you please.

= simple_form_for @startup, :html => { :class => 'form-horizontal' }, wrapper: :horizontal_form, wrapper_mappings: { check_boxes: :horizontal_radio_and_checkboxes, radio_buttons: :horizontal_radio_and_checkboxes, boolean: :horizontal_boolean } do |f|
  = f.error_notification

  = f.input :name, label: "Startup's Name", required: true, input_html: { placeholder: '', maxlength: 255 }

  = f.input :email, input_html: { maxlength: 255 }
  /= f.input :phone, label: "Contact number"

  = f.input :website, input_html: { placeholder: "You startup's website URL, if any.", maxlength: 255 }

  /- user = @startup.founders.select{|f| f.id == @current_user.id}
  /= f.fields_for :founders, user do |p|
  /  = p.input :id, as: :hidden
  /  = p.input :title, label: "Your role at the company", input_html: {placeholder: "Eg. Co-founder & CEO, VP Engineering, COO", class: 'span4'}, required: true

  = f.input :logo, as: :file, required: false

  /= f.input :pitch, label: 'Idea', as: :text, hint: "max 140 characters",  input_html: {class:'span5', placeholder: 'Your Elevator Pitch: It reflects the concept of being able to explain your product in the time span of an elevator ride', maxlength: 140, rows: 3}, required: true
  /= f.input :address, label: 'Residential address', as: :text, input_html: {rows: 4, class:'span5', placeholder: ''}, required: true

  = f.input :about, label: 'About your Startup', as: :text,
      hint: 'If you were to describe your startup and your product in less than 1000 characters, what would it be?',
      input_html: { rows: 10, class:'span5', placeholder: 'Description in less than 1000 characters', maxlength: 1000 }

  = f.input :incubation_location, required: true, collection: Startup.valid_incubation_location_values, label_method: ->(obj) { obj.capitalize }, input_html: { class: 'selectpicker' }

  = f.input :presentation_link,
      hint: 'Share the link to a presentation that showcases your company, core products in fair detail.',
      input_html: { placeholder: 'URL to presentation', class: 'span5', maxlength: 255 }

  = f.input :product_progress, collection: Startup.valid_product_progress_values, label_method: ->(obj) { product_progress_html(obj) }, input_html: { class: 'selectpicker' }
  = f.association :categories, hint: 'Categories that describe your startup. Max 3.', collection: Category.startup_category, as: :select, input_html: { class: 'span4 selectpicker', 'data-live-search' => 'true', 'data-max-options' => "#{Startup::MAX_CATEGORY_COUNT}" }
  = f.input :revenue_generated, hint: 'How much cumulative revenue have you generated till date?', input_html: { max: 999999999, 'data-max-int-length' => 9 }
  = f.input :team_size, label: 'Total Team Size', input_html: { max: 9999, 'data-max-int-length' => 4 }
  = f.input :women_employees, label: 'Number of Women Employees', input_html: { max: 9999, 'data-max-int-length' => 4 }

  /= f.input :help_from_sv,label: 'Help from Startup Village', as: :select, collection: Category.startup_village_help, value_method: :id, input_html:{multiple: true, class: 'span5'}

  = f.input :twitter_link, input_html: { placeholder: 'https://twitter.com/username', maxlength: 255 }
  = f.input :facebook_link, input_html: { placeholder: 'https://facebook.com/username', maxlength: 255 }

  #pre_funds.optional.checkbox
    /label
    /  = check_box_tag "pre_funds"
    /  p Have you raised funds yet?
    /.content
    /  = f.input :pre_funds, label: "How much have you raised", input_html: {placeholder: 'Amount in INR'}
    /  = f.input :pre_investers_name, label: "Name of investors", input_html: {placeholder: ''}
  #startup_before.optional.checkbox
    /label
    /  = check_box_tag "startup_history"
    /  p Have you run a startup before?
    /.content
    /  .control-group.string.optional
    /    label.string.optional.control-label Name of your previous startup
    /    .controls
    /      = text_field_tag "startup[startup_before][startup_name]", (@startup.startup_before['startup_name'] rescue nil), placeholder: "", class: "string"
    /  .control-group.string.optional
    /    label.string.optional.control-label Describe that startup
    /    .controls
    /      = text_area_tag "startup[startup_before][startup_descripition]", (@startup.startup_before['startup_descripition'] rescue nil), placeholder: "startup_descripition", class: "form-control span5", placeholder: '', rows: 5
  = f.submit class: 'btn btn-success offset2', value: 'Update startup profile'

javascript:
  $(function () {
    $(".optional .content").hide();
    $(".optional input:checkbox").click(function () {
      var $this = $(this);
      var optional = $($this).parent().parent();
      if ($this.is(':checked')) {
        $(".content", optional).show()
      } else {
        $(".content", optional).hide()
      }
    });
    // $(".bootstrap-select .dropdown-menu ul", $("#startup_category_ids").parent()).on('click', function(e){
    //   ul_ele = $(".bootstrap-select .dropdown-menu ul", $("#startup_category_ids").parent())
    //   selected = $("li.selected", ul_ele)
    //   if(selected.size() > 3){
    //     // $(selected[0]).removeClass("selected")
    //     e.preventDefault()
    //   }
    // })

    $('.selectpicker').selectpicker();
    // $('select').selectpicker();
    // $('#startup_category_ids').select2({ placeholder : 'Select Category' });

    // This method counts characters (or words) in an element, and updates that into the help element, displaying
    // current count and max allowed count.
    counter = function (ele, help_ele, max_chars, is_words) {
      var value = $(ele).val();

      if (value.length == 0) {
        $(help_ele).html(0 + "/" + max_chars + " " + (is_words ? "words" : "characters"));
        return;
      }

      var regex = /\s+/gi;
      var wordCount = value.trim().replace(regex, ' ').split(' ').length;
      // var totalChars = value.length;
      var charCount = value.trim().length;
      // var charCountNoSpace = value.replace(regex, '').length;

      $(help_ele).html((is_words ? wordCount : charCount) + "/" + max_chars + " characters");
    };

    update_pitch = function () {
      var help_ele = $(".startup_pitch .help-block");
      var ele = $(".startup_pitch #startup_pitch");
      counter(ele, help_ele, #{Startup::MAX_PITCH_CHARACTERS})
    };

    update_about = function () {
      var help_ele = $(".startup_about .help-block");
      var ele = $(".startup_about #startup_about");
      counter(ele, help_ele, #{Startup::MAX_ABOUT_CHARACTERS})
    };

    $(".startup_pitch #startup_pitch").click(update_pitch).change(update_pitch).keydown(update_pitch).keypress(update_pitch).keyup(update_pitch).blur(update_pitch).focus(update_pitch);
    $(".startup_about #startup_about").click(update_about).change(update_about).keydown(update_about).keypress(update_about).keyup(update_about).blur(update_about).focus(update_about);

    limit_length = function(element, length) {
      if (element.value.length > length)
        element.value = element.value.slice(0, length);
    };

    $('input[data-max-int-length]').keyup(function() {
      var maxIntLength = parseInt(this.getAttribute("data-max-int-length"));
      limit_length(this, maxIntLength);
    });

    $('input[data-max-int-length]').on('paste', function () {
      var element = this;
      var maxIntLength = parseInt(this.getAttribute("data-max-int-length"));
      setTimeout(function () {
        limit_length(element, maxIntLength);
      }, 100);
    });
  });

