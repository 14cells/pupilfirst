- timeline_event = params.dig(:startup_feedback, :timeline_event_id).present? ? TimelineEvent.find(params.dig(:startup_feedback, :timeline_event_id)) : nil

= semantic_form_for [:admin, @startup_feedback] do |f|
  = f.semantic_errors *f.object.errors.keys
  = f.inputs 'Feedback details' do
    = f.input :startup, collection: Startup.where.not(product_name: nil).order(:product_name), label: 'Product', required: true
    = f.input :faculty, as: :select, required: true, collection: Faculty.order(:name), selected: @startup_feedback&.faculty&.id || current_admin_user&.faculty&.id
    = f.hidden_field :feedback
    .label-replica
      ' Feedback for startup
      abbr title="required" *
    trix-editor.input-replica input="startup_feedback_feedback" class="#{'error-replica' if @startup_feedback.errors[:feedback].present?}"
    - if @startup_feedback.errors[:feedback].present?
      p.inline-errors-replica #{@startup_feedback.errors[:feedback][0]}
    = f.input :activity_type
    = f.input :reference_url, label: 'Reference URL'
    = f.input :attachment, as: :file

    - if timeline_event.present?
      = f.input :timeline_event_id, as: :hidden, input_html: { value: timeline_event.id }
      div Timeline Event from #{timeline_event.startup.product_name} for type #{timeline_event.title} will be linked to this feedback.

  = f.submit
br

#previous-feedback
  h2#feedback-list-title
  table#feedback-table.index_table.index
    thead
      tr
        th
        th Feedback
        th Reference URL
        th Sent at

    tbody#feedback-table-body
