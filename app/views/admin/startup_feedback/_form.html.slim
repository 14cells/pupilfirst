= semantic_form_for [:admin, @startup_feedback] do |f|
  = f.semantic_errors *f.object.errors.keys
  = f.inputs 'Feedback details' do
    = f.input :startup, collection: Startup.where.not(product_name: nil).order(:product_name), label: 'Product'
    = f.hidden_field :feedback
    .label-replica
      ' feedback
      abbr title="required" *
    trix-editor.input-replica input="startup_feedback_feedback" class="#{'error-replica' if @startup_feedback.errors[:feedback].present?}"
    - if @startup_feedback.errors[:feedback].present?
      p.inline-errors-replica #{@startup_feedback.errors[:feedback][0]}
    = f.input :activity_type
    = f.input :reference_url
    = f.input :attachment, as: :file
    = f.input :faculty, as: :select, collection: Faculty.active.order(:name), selected: @startup_feedback&.faculty&.id || current_admin_user&.faculty&.id
    = f.input :event_status, label: 'Mark Event as:', as: :select, collection: TimelineEvent.valid_verified_status, selected: TimelineEvent.find(@startup_feedback.event_id).verified_status, include_blank: false if @startup_feedback.event_id.present?
    = f.input :event_id, as: :hidden

  = f.submit
br

#previous-feedback
  h2#feedback-list-title
  table#feedback-table.index_table.index
    thead
      tr
        th
        th Feedback
        th Reference URL
        th Sent at

    tbody#feedback-table-body
