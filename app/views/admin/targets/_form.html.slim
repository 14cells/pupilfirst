#admin-target__edit

= semantic_form_for [:admin, @target] do |f|
  = f.semantic_errors *f.object.errors.keys
  = f.inputs 'Target details' do
    #target-founders-for-startup-url data-url=founders_for_target_admin_targets_url

    = f.input :role,
      as: :select,
      collection: Target.valid_roles.map { |r| [t("role.#{r}"), r] },
      include_blank: false

    = f.input :title
    = f.input :chore
    = f.input :session_at, as: :string, input_html: { class: 'date-time-picker', data: { format: 'Y-m-d H:i:s O' } }

    = f.input :tag_list,
      as: :select,
      collection: Target.tag_counts_on(:tags).pluck(:name),
      multiple: true

    = f.input :level

    = f.hidden_field :description

    .label-replica
      ' Description
      abbr title="required" *

    trix-editor.input-replica input="target_description" class="#{'error-replica' if @target.errors[:description].present?}"

    - if @target.errors[:description].present?
      p.inline-errors-replica #{@target.errors[:description][0]}

    = f.input :target_type, collection: Target.valid_target_types
    = f.input :timeline_event_type, include_blank: 'Select default timeline event type'
    = f.input :points_earnable

    = f.input :prerequisite_targets,
      collection: @target.target_group.present? ? @target.batch.targets.where.not(id: @target.id) : [],
      include_blank: @target.target_group.present? ? false : 'Assign a target group and save this target first'

    = f.input :slideshow_embed
    = f.input :video_embed
    = f.input :resource_url
    = f.input :completion_instructions
    = f.input :assigner, collection: Faculty.active.order(:name), include_blank: false

    = f.input :target_group,
      collection: (@target.batch.present? ? @target.batch.target_groups : TargetGroup.all).sorted_by_week.includes(:program_week)

    = f.input :sort_index
    = f.input :days_to_complete
    = f.input :rubric, as: :file
    = f.input :remote_rubric_url

  = f.submit
